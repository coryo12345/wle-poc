package migrations

import (
	"encoding/csv"
	"log"
	"os"
	"time"

	"github.com/pocketbase/dbx"
	m "github.com/pocketbase/pocketbase/migrations"
	"github.com/pocketbase/pocketbase/tools/security"
)

// Defining these constants to match the ID style generated by pocketbase
const (
	// DefaultIdLength is the default length of the generated model id.
	DefaultIdLength = 15

	// DefaultIdAlphabet is the default characters set used for generating the model id.
	DefaultIdAlphabet = "abcdefghijklmnopqrstuvwxyz0123456789"
)

func Init_data() {
	m.Register(func(db dbx.Builder) error {
		// insert some seed data
		add_users(db)
		add_themes(db)
		add_tags(db)

		return nil
	}, func(db dbx.Builder) error {
		// we can't undo this. It may have been modified by the UI, or data linked to this.
		// It is seed data, so this shouldn't be a problem
		return nil
	})
}

func build_field(field string) string {
	if field == "RAND" {
		rand_id := security.RandomStringWithAlphabet(DefaultIdLength, DefaultIdAlphabet)
		return rand_id
	}
	return field
}

func add_themes(db dbx.Builder) {
	// read csv file
	f, err := os.Open("seed-data/themes.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	// convert records to array of structs
	type Theme struct {
		id   string
		name string
	}
	var themes []Theme
	for row, line := range data {
		if row > 0 { // omit header line
			var theme Theme
			for col, field := range line {
				if col == 0 {
					theme.id = build_field(field)
				} else if col == 1 {
					theme.name = build_field(field)
				}
			}
			themes = append(themes, theme)
		}
	}

	// insert rows
	for _, val := range themes {
		t := time.Now().UTC()
		q := db.Insert("themes", dbx.Params{
			"id":      val.id,
			"name":    val.name,
			"created": t.String(),
			"updated": t.String(),
		})
		_, err := q.Execute()
		if err != nil {
			log.Fatal("Unable to add theme: " + err.Error())
		}
	}
}

func add_tags(db dbx.Builder) {
	// read csv file
	f, err := os.Open("seed-data/tags.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	// convert records to array of structs
	type Tag struct {
		id       string
		user_id  string
		theme_id string
		verse_id string
	}
	var tags []Tag
	for row, line := range data {
		if row > 0 { // omit header line
			var tag Tag
			for col, field := range line {
				if col == 0 {
					tag.id = build_field(field)
				} else if col == 1 {
					tag.user_id = build_field(field)
				} else if col == 2 {
					tag.theme_id = build_field(field)
				} else if col == 3 {
					tag.verse_id = build_field(field)
				}
			}
			tags = append(tags, tag)
		}
	}

	// insert rows
	for _, val := range tags {
		t := time.Now().UTC()
		q := db.Insert("tags", dbx.Params{
			"id":      val.id,
			"user":    val.user_id,
			"theme":   val.theme_id,
			"verseId": val.verse_id,
			"created": t.String(),
			"updated": t.String(),
		})
		_, err := q.Execute()
		if err != nil {
			log.Fatal("Unable to add tag: " + err.Error())
		}
	}
}

func add_users(db dbx.Builder) {
	// read csv file
	f, err := os.Open("seed-data/users.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	// convert records to array of structs
	type User struct {
		id    string
		email string
		name  string
	}
	var users []User
	for row, line := range data {
		if row > 0 { // omit header line
			var user User
			for col, field := range line {
				if col == 0 {
					user.id = build_field(field)
				} else if col == 1 {
					user.email = build_field(field)
				} else if col == 2 {
					user.name = build_field(field)
				}
			}
			users = append(users, user)
		}
	}

	// insert rows
	for _, val := range users {
		t := time.Now().UTC()
		q := db.Insert("_users", dbx.Params{
			"id":                     val.id,
			"email":                  val.email,
			"verified":               true,
			"tokenKey":               "",
			"passwordHash":           "",
			"lastResetSentAt":        t.String(),
			"lastVerificationSentAt": t.String(),
			"created":                t.String(),
			"updated":                t.String(),
		})
		_, err := q.Execute()
		if err != nil {
			log.Fatal("Unable to add user: " + err.Error())
		}
		r := db.Insert("profiles", dbx.Params{
			"id":      val.id,
			"userId":  val.id,
			"name":    val.name,
			"created": t.String(),
			"updated": t.String(),
		})
		_, err = r.Execute()
		if err != nil {
			log.Fatal("Unable to add profile: " + err.Error())
		}
	}
}
